1.单向队列
public class MyQueue {

    private Object []queArray;
    private int maxSize;
    private int front;
    private int rear;
    private int nItems;
    //队列中实际元素个数

    public MyQueue(int s){
        maxSize=s;
        queArray=new Object[maxSize];
        front=0;
        rear=-1;
        nItems=0;

    }

    //队列中新增数据
    public void insert(int value){
        if(isFull()){
            System.out.println("full queue!");
            
        }
        else {
            if(rear==maxSize-1){
               //如果队列尾部指向顶了,那么循环回来,执行队列的第一个元素 
                
                rear=-1;
            }
            //队尾指针加1,然后在队尾指针处加1
            queArray[++rear]=value;
            nItems++;
        }
    }
    public boolean isFull(){
        return (nItems==maxSize);
    }
    public boolean isEmpty(){
        return (nItems==0);
    }
    
    //查看头数据
    public Object peakFront(){
        return queArray[front];
    }
    public int getSize(){
        return nItems;
    }
}
2.双端队列
3.优先级队列
4.应用
  用栈实现队列
  采用双栈实现队列
  
  public class MyQueue {

    Stack<Integer> stackPush;
    Stack<Integer> stackPop;
    //声明数据类型
    public MyQueue(){
        stackPop=new Stack<Integer>();
        stackPush=new Stack<Integer>();
    }

    public void Push(int x){
        stackPush.push(x);
    }
    //把栈1中所有的元素移到栈2,接着把新元素压制栈2最后把栈2中所有元素弹出并压制栈1
    public int pop(){
        if(stackPop.isEmpty()&&stackPush.isEmpty()){
            throw new RuntimeException("queue is empty!");
        }
        else {
            if (stackPop.isEmpty()){
                while (!stackPush.isEmpty()){
                    stackPop.push(stackPush.pop());
                }
            }
        }
        return stackPop.peek();
    }
    public boolean empty(){
        return stackPop.isEmpty()&&stackPush.isEmpty();
    }
}

  用队列实现栈
  
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
