public class MySearch {

   // 最基本的二分查找:数组中每个数都不一样
    public int binarySearch(int[] array,int target){
        int low=0,high=array.length-1,mid;
        while (low<=high){//循环的判定条件
            mid=low+(high-low)/2;
            if(array[mid]==target){
                return mid;//返回索引
            }else if(array[mid]>target){
                high=mid-1;
            }else {
                low=mid+1;
            }
        }
        return -1;
    }
    //查找目标值的左区域/查找目标区域的第一个值
    //array=[1,3,7,7,7,7,8,14,14]  target=7  return 4
    public int binarySearchLowerBound(int[] array,int target){
        int low=0,high=array.length-1,mid;
        mid=low+(high-low)/2;
        if(target<=array[mid]){
            high=mid+1;
        }else {
            low=mid+1;
        }
        if(low<array.length&&array[low]==target){
            return low;

        }else return -1;

    }
    ///查找目标值的左区域/查找目标区域的最后一个值
    public int binarySearchUpperBound(int[] array,int target){
        int low=0,high=array.length-1,mid;
        while (low<high){
            mid=low+(high-low)/2;
            if(target>=array[mid]){
                low=mid+1;

            }else high=mid-1;
        }
        if(high>=0&&array[high]==target){
            return high;
        }else return -1;

    }

    
}

//
//查找旋转数组的最小元素
//input:[3,4,5,1,2]
//output:1

//不存在重复项
    public int findMin(int[]nums){
        if(nums.length==0){
            return -1;
        }

        int left=0,right=nums.length-1,mid;
        while (left<right){
            mid=left+(right-left)/2;
            if(nums[mid]>nums[right]){
                left=mid+1;
            }else right=mid;
        }
        return nums[left];

    }
////查找旋转数组的最小元素
    //    //input:[3,4,5,1,2,2] output:1
    //    //存在重复项
    public int findMin2(int[]nums){
        if(nums.length==0){
            return -1;
        }

        int left=0,right=nums.length-1,mid;
        while (left<right){
            mid=left+(right-left)/2;
            if(nums[mid]>nums[right]){
                left=mid+1;
            } else if (nums[mid]<nums[right]) {
                right=mid;
            }else 
                right--;
        }
        return nums[left];

    }
